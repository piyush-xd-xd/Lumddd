/// <reference types="node" />
import { Worker } from 'node:cluster';
import { Indomitable } from './Indomitable';
import { Main } from './ipc/Main';
/**
 * Options for child processes
 */
export interface ClusterManagerOptions {
    id: number;
    shards: number[];
    manager: Indomitable;
}
/**
 * A class to manage a cluster
 */
export declare class ClusterManager {
    readonly manager: Indomitable;
    readonly id: number;
    readonly shards: number[];
    readonly ipc: Main;
    started: boolean;
    ipcId?: string;
    worker?: Worker;
    tickReady?: Function;
    ready: boolean;
    readyAt: number;
    /**
     * @param options.id Cluster ID
     * @param options.shards An array of numbers representing the shards that this cluster controls
     * @param options.manager Indomitable instance that spawned this cluster
     */
    constructor(options: ClusterManagerOptions);
    /**
     * Destroy associated worker process
     * @param signal Process exit signal
     */
    destroy(signal?: string): void;
    /**
     * Respawn associated worker process
     * @param delay Time to wait before restarting worker process
     */
    respawn(delay?: number): Promise<void>;
    /**
     * Spawn a worker process
     */
    spawn(): Promise<void>;
    /**
     * Remove all listeners on attached worker process and free from memory
     */
    private cleanup;
    /**
     * Waits for this cluster to be ready
     * @returns A promise that resolves to void
     * @internal
     */
    private wait;
}
//# sourceMappingURL=ClusterManager.d.ts.map