/// <reference types="node" />
import type { Client } from 'discord.js';
import { Indomitable } from '../Indomitable';
import { Message, SessionObject, Transportable } from '../Util';
import { Worker as WorkerIpc } from '../ipc/Worker';
import EventEmitter from 'node:events';
export declare interface ShardClientUtil {
    /**
     * Emmited when an IPC message from parent process is recieved
     * @eventProperty
     */
    on(event: 'message', listener: (message: Message | unknown) => void): this;
    once(event: 'message', listener: (message: Message | unknown) => void): this;
    off(event: 'message', listener: (message: Message | unknown) => void): this;
}
/**
 * A class for your interprocess communication needs
 */
export declare class ShardClientUtil extends EventEmitter {
    readonly client: Client;
    readonly mode: string;
    readonly ipc: WorkerIpc;
    readonly clusterId: number;
    readonly clusterCount: number;
    readonly shardIds: number[];
    readonly shardCount: number;
    constructor(manager: Indomitable, client: Client);
    /**
     * A shortcut to get the current ipc delay
     * @returns A promise that resolves to delay in nanoseconds
     */
    ping(): Promise<number>;
    /**
     * Evaluates a script or function on all clusters in the context of the your client
     * @returns A promise that resolves to an array of code results
     */
    broadcastEval(script: Function, context?: any): Promise<any[]>;
    /**
     * Fetches a client property value on all clusters
     * @returns A promise that resolves to an array of code results
     */
    fetchClientValues(prop: string): Promise<any[]>;
    /**
     * Gets the cached session info or fetches an updated session info
     * @param update If you want to fetch and update the cached session info
     * @returns A session object
     */
    fetchSessions(update?: boolean): Promise<SessionObject>;
    /**
     * Restarts the given cluster from the clusterId given
     * @returns A promise that resolves to void
     */
    restart(clusterId: number): Promise<void>;
    /**
     * Restarts all the clusters Indomitable handles sequentially
     * @returns A promise that resolves to void
     */
    restartAll(): Promise<void>;
    /**
     * Shorcut to send a message to the parent process
     * @returns A promise that resolves to void or an repliable object
     */
    send(transportable: Transportable): Promise<any | void>;
}
//# sourceMappingURL=ShardClientUtil.d.ts.map