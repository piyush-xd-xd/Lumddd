"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShardClientUtil = void 0;
const Util_1 = require("../Util");
const Worker_1 = require("../ipc/Worker");
const node_events_1 = __importDefault(require("node:events"));
/**
 * A class for your interprocess communication needs
 */
class ShardClientUtil extends node_events_1.default {
    client;
    mode;
    ipc;
    clusterId;
    clusterCount;
    shardIds;
    shardCount;
    constructor(manager, client) {
        super();
        this.client = client;
        this.mode = 'cluster';
        this.ipc = new Worker_1.Worker(this, manager);
        this.clusterId = Number(process.env.CLUSTER);
        this.clusterCount = Number(process.env.CLUSTER_TOTAL);
        this.shardIds = this.client.options.shards;
        this.shardCount = Number(process.env.SHARDS_TOTAL);
    }
    /**
     * A shortcut to get the current ipc delay
     * @returns A promise that resolves to delay in nanoseconds
     */
    ping() {
        return this.ipc.ping();
    }
    /**
     * Evaluates a script or function on all clusters in the context of the your client
     * @returns A promise that resolves to an array of code results
     */
    broadcastEval(script, context = {}) {
        const content = {
            op: Util_1.ClientEvents.EVAL,
            data: `(${script.toString()})(this, ${JSON.stringify(context)})`,
            internal: true
        };
        return this.ipc.send({ content, repliable: true });
    }
    /**
     * Fetches a client property value on all clusters
     * @returns A promise that resolves to an array of code results
     */
    fetchClientValues(prop) {
        return this.broadcastEval((client) => client[prop]);
    }
    /**
     * Gets the cached session info or fetches an updated session info
     * @param update If you want to fetch and update the cached session info
     * @returns A session object
     */
    fetchSessions(update = false) {
        const content = {
            op: Util_1.ClientEvents.SESSION_INFO,
            data: { update },
            internal: true
        };
        return this.ipc.send({ content, repliable: true });
    }
    /**
     * Restarts the given cluster from the clusterId given
     * @returns A promise that resolves to void
     */
    restart(clusterId) {
        const content = {
            op: Util_1.ClientEvents.RESTART,
            data: { clusterId },
            internal: true
        };
        return this.ipc.send({ content });
    }
    /**
     * Restarts all the clusters Indomitable handles sequentially
     * @returns A promise that resolves to void
     */
    restartAll() {
        const content = {
            op: Util_1.ClientEvents.RESTART_ALL,
            data: {},
            internal: true
        };
        return this.ipc.send({ content });
    }
    /**
     * Shorcut to send a message to the parent process
     * @returns A promise that resolves to void or an repliable object
     */
    send(transportable) {
        return this.ipc.send(transportable);
    }
}
exports.ShardClientUtil = ShardClientUtil;
//# sourceMappingURL=ShardClientUtil.js.map