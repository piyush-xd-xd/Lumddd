"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShardClient = void 0;
const Util_1 = require("../Util");
const ShardClientUtil_1 = require("./ShardClientUtil");
class ShardClient {
    manager;
    client;
    clusterId;
    constructor(manager) {
        this.manager = manager;
        const env = process.env;
        const clientOptions = manager.clientOptions || {};
        clientOptions.shards = env.SHARDS.split(' ').map(Number);
        clientOptions.shardCount = Number(env.SHARDS_TOTAL);
        const client = new manager.client(clientOptions);
        // @ts-ignore -- our own class
        client.shard = new ShardClientUtil_1.ShardClientUtil(manager, client);
        this.client = client;
        this.clusterId = Number(process.env.CLUSTER);
    }
    async start(token) {
        // @ts-ignore -- our own class
        const shardClientUtil = this.client.shard;
        // attach listeners
        this.client.once('ready', () => this.send({ op: Util_1.ClientEvents.READY, data: { clusterId: this.clusterId } }));
        this.client.on('shardReady', (shardId) => this.send({ op: Util_1.ClientEvents.SHARD_READY, data: { clusterId: this.clusterId, shardId } }));
        this.client.on('shardReconnecting', (shardId) => this.send({ op: Util_1.ClientEvents.SHARD_RECONNECT, data: { clusterId: this.clusterId, shardId } }));
        this.client.on('shardResume', (shardId, replayed) => this.send({ op: Util_1.ClientEvents.SHARD_RESUME, data: { clusterId: this.clusterId, shardId, replayed } }));
        // @ts-ignore -- Discord.JS faulty typings?
        this.client.on('shardDisconnect', (event, shardId) => this.send({ op: Util_1.ClientEvents.SHARD_DISCONNECT, data: { clusterId: this.clusterId, shardId, event } }));
        await this.client.login(token);
    }
    send(partial) {
        // @ts-ignore -- our own class
        const shardClientUtil = this.client.shard;
        const content = { ...partial, internal: true };
        shardClientUtil
            .send({ content, repliable: false })
            .catch((error) => this.client.emit(Util_1.LibraryEvents.ERROR, error));
    }
}
exports.ShardClient = ShardClient;
//# sourceMappingURL=ShardClient.js.map