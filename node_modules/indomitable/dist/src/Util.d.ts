/// <reference types="node" />
/// <reference types="node" />
import { RequestOptions } from 'node:https';
/**
 * Events for internal use
 */
export declare enum ClientEvents {
    EVAL = "eval",
    RESTART = "restart",
    RESTART_ALL = "restartAll",
    SESSION_INFO = "sessionInfo",
    READY = "ready",
    PING = "ping",
    SHARD_READY = "shardReady",
    SHARD_RECONNECT = "shardReconnect",
    SHARD_RESUME = "shardResume",
    SHARD_DISCONNECT = "shardDisconnect"
}
/**
 * Events emitted by Indomitable
 */
export declare enum LibraryEvents {
    DEBUG = "debug",
    CONNECT = "connect",
    DISCONNECT = "disconnect",
    CLOSE = "close",
    MESSAGE = "message",
    STATUS = "status",
    ERROR = "error",
    WORKER_FORK = "workerFork",
    WORKER_READY = "workerReady",
    WORKER_EXIT = "workerExit",
    SHARD_READY = "shardReady",
    SHARD_RECONNECT = "shardReconnect",
    SHARD_RESUME = "shardResume",
    SHARD_DISCONNECT = "shardDisconnect"
}
/**
 * Type for raw ipc message
 */
export declare enum RawIpcMessageType {
    MESSAGE = "message",
    RESPONSE = "response"
}
/**
 * Data structure representing an internal event
 */
export interface InternalEvents {
    op: ClientEvents;
    data: any;
    internal: true;
}
/**
 * Data structure representing an internal error
 */
export interface InternalError {
    internal: true;
    error: true;
    name: string;
    reason: string;
    stack: string;
}
/**
 * Data structure representing IPC data
 */
export interface Transportable {
    content: any;
    repliable?: boolean;
}
/**
 * Internal promise data tracking
 */
export interface InternalPromise {
    resolve: Function;
    reject: Function;
    timeout: NodeJS.Timeout;
}
/**
 * Data structure representing internal IPC data
 */
export interface RawIpcMessage {
    id: string | null;
    content: any;
    internal: true;
    type: RawIpcMessageType;
}
/**
 * Data structure representing a IPC message
 */
export interface Message {
    reply: (data: any) => void;
    content: any;
    repliable: boolean;
}
/**
 * Data structure representing a Discord session
 */
export interface SessionObject {
    url: string;
    shards: number;
    session_start_limit: {
        total: number;
        remaining: number;
        reset_after: number;
        max_concurrency: number;
    };
}
/**
 * Wrapper function for fetching data using HTTP
 * @param url URL of resource to fetch
 * @param options RequestOptions to modify behavior
 * @returns A promise containing data fetched, or an error
 */
export declare function Fetch(url: string | URL, options: RequestOptions): Promise<any>;
/**
 * Fetch sessions from discord
 * @param token Bot token
 * @returns A promise containing a session object
 */
export declare function FetchSessions(token: string): Promise<SessionObject>;
/**
 * Modify an array to contain a the specified amount of chunks
 * @param original An array of data
 * @param chunks The amount of chunks to transform into
 * @returns A modified array
 */
export declare function Chunk(original: any[], chunks: number): any[];
/**
 * Wait for a specific amount of time (timeout)
 * @param ms Time to wait in milliseconds
 * @returns A promise that resolves in x seconds
 */
export declare function Delay(ms: number): Promise<void>;
//# sourceMappingURL=Util.d.ts.map